"""
Total wealth held in trusts
"""
type AzuloTrustFactory @entity {
    # factory address
    id: ID!

    # total trusts & trustees/beneficiaries
    totalTrusts: Int!
    totalBeneficiaries: Int!

    # total volume
    totalVolumeUSD: BigDecimal!
    totalVolumeETH: BigDecimal!

    # untracked values - less confident USD scores
    untrackedVolumeUSD: BigDecimal!

    # total assets
    totalWealthUSD: BigDecimal!
    totalWealthETH: BigDecimal!

    # transactions
    txCount: BigInt!
}

"""
Trust daily volume
"""
type AzuloTrustDaily @entity {
    id: ID! # timestamp rounded to current day by dividing by 86400
    date: Int!

    # total and new daily trusts
    totalTrusts: Int!
    totalBeneficiaries: Int!
    newTrusts: Int!
    newBeneficiaries: Int!

    dailyVolumeETH: BigDecimal!
    dailyVolumeUSD: BigDecimal!
    dailyVolumeUntracked: BigDecimal!

    totalVolumeETH: BigDecimal!
    totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion

    txCount: BigInt!
}

"""
Trust smart contract trust address
"""
type Trust @entity {
    "Unique identifier of the Trust (contract Address)"
    id                  : ID!

    "Address who created the contract"
    creator             : Bytes!

    "Network where the Trust is deployed (plain text: rinkeby, ropsten, mainnet, etc.)"
    network             : String!

    "Timestamp when the Trust was deployed"
    stamp               : BigInt!

    "Transaction hash when the Trust was deployed"
    hash                : Bytes!

    "Factory Address which deployed the Trust"
    factory             : Bytes!

    "List of owner Addresses of the Trust"
    owners              : [Bytes!]!

    "Number of confirmation required to execute a transaction out of the Trust"
    threshold           : BigInt!

    "List of successful and failed transactions executed from the Trust"
    transactions        : [Transaction!]!

    "Value of total assets held in USD"
    totalAssetsUSD: BigDecimal!

    "Value of total assets held in ETH"
    totalAssetsETH: BigDecimal!

    "Token assets held in Trust"
    tokens: [TrustToken!]! @derivedFrom(field: "trust")
}

"""
Transactions out of the trust
"""
type Transaction @entity {
    "Unique Identifier of the transaction called Transaction Hash = keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce))"
    id                  : ID!

    "Timestamp when the transaction was executed"
    stamp               : BigInt

    "Block on Ethereum"
    block               : BigInt

    "Transaction hash on Ethereum"
    hash                : Bytes

    "Status of the transaction"
    status              : TransactionStatus

    "Transaction hash on the Safe"
    txhash              : Bytes

    "Ether Amount (in WEI) included in the transaction - transferred from the Trust when the transaction is executed"
    value               : BigInt

    "Destination of the transaction"
    destination         : Bytes

    "Data of the transaction - smart contract input data bytecode - see https://lab.miguelmota.com/ethereum-input-data-decoder/example/"
    data                : Bytes

    "Signatures"
    signatures          : Bytes

    "Nonce"
    nonce               : BigInt

    "Operation"
    operation           : Operation

    "Estimated Gas that should be used for the Safe transaction."
    estimatedSafeTxGas  : BigInt

    "Estimated Gas costs for that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)"
    estimatedBaseGas    : BigInt

    "gasPrice (in gasToken)"
    gasPrice            : BigInt

    "gasToken"
    gasToken            : Bytes

    "refundReceiver"
    refundReceiver      : Bytes

    "Amount paid as fee to refundReceiver"
    payment             : BigInt

    "Trust parent"
    trust              : Trust! @derivedFrom(field: "transactions")
}

enum TransactionStatus {
    "Transaction was executed successfully"
    EXECUTED

    "Transaction failed during the execution"
    FAILED
}

enum Operation {
    CALL
    DELEGATE_CALL
}

"""
Asset stores all high level variables for a Token asset
"""
type Asset @entity {
  "token address"
  id: ID!

  "mirrored from the smart contract"
  symbol: String!
  name: String!
  decimals: BigInt!

  "used for other stats like marketcap"
  totalSupply: BigInt

  "derived prices"
  derivedETH: BigDecimal
  
  "Defi asset category"
  category: String!
}

"""
TrustToken is a single trust within a single Token asset
"""
type TrustToken @entity {
    "Token address + trust address"
    id: ID!

    "Trust address"
    trustID: String!

    "Relation to asset"
    asset: Asset!

    "Symbol of the Token"
    symbol: String!

    "Relation to trust"
    trust: Trust!

    "Defi asset category"
    category: String!

    "Token balance of the trust"
    balance: BigDecimal!
}

"""
Stores for USD calculations
"""
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}


"""
Pairs for USD calculations
"""
type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Asset!
  token1: Asset!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  # used for separating per pair reserves and global
  trackedReserveETH: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!
}

type UniswapFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}